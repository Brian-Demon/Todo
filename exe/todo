#!/usr/bin/env ruby

require "thor"
require "bundler/setup"
require "todo"

class TodoCLI < Thor
  desc("add [ITEM]", "adds item to list")
  option :database, default: "~/.todo"
  def add(item)
    config = {
      database: File.open(File.expand_path(options[:database]), "a+")
    }
    Todo::Manager.new(config).add(item)
  end #add

  desc("display", "displays the current todo list")
  option :database, default: "~/.todo"
  def display
    config = {
      database: File.open(File.expand_path(options[:database]), "a+")
    }
    manager = Todo::Manager.new(config)
    if manager.is_empty?
      puts "There is nothing in your todo list right now..."
    else
      puts "\n#{manager.display}\n"
    end
  end #display

  desc("remove [ITEM]", "removes item from list")
  option :database, default: "~/.todo"
  def remove(item)
    config = {
      database: File.open(File.expand_path(options[:database]), "a+")
    }
    #Todo::Manager.new(config).remove(item)
    puts "Coming soon..."
  end #remove

  desc("clear", "clears all items from list")
  option :database, default: "~/.todo"
  def clear
    config = {
      database: File.open(File.expand_path(options[:database]), "a+")
    }
    response = ask "Clearing the list can not be undone, are you sure? [y/n]:".to_s
    return if response.downcase != "y"
    Todo::Manager.new(config).clear
  end #clear
end #TodoCLI

TodoCLI.start(ARGV)
